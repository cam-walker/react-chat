{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","empty","useRef","messagesRef","collection","imagesRef","query","orderBy","limit","imageQuery","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","imageURL","current","scrollIntoView","behavior","setImageURL","sigCanvas","clear","save","getCanvas","toDataURL","map","msg","ChatMessage","message","id","src","alt","style","position","display","alignItems","flexDirection","alignSelf","width","height","ref","onSubmit","modal","trigger","type","closeDocumentOnClick","close","canvasProps","value","onChange","target","placeholder","disabled","props","messageClass","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2a554bb.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Popup from 'reactjs-popup';\nimport SignaturePad from 'react-signature-canvas';\nimport './App.css';\n//import Canvas from './canvas';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAgSl05jUY01ns9JM0ekoyHbzz10jIzf4c\",\n  authDomain: \"chat-app-ac6fe.firebaseapp.com\",\n  projectId: \"chat-app-ac6fe\",\n  storageBucket: \"chat-app-ac6fe.appspot.com\",\n  messagingSenderId: \"824141881410\",\n  appId: \"1:824141881410:web:68a867abf0dca7705ecddb\",\n});\n/* A Firebase authorization */\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n/* A Firebase authorization */\nfunction App() {\nconst [user] = useAuthState(auth);\nreturn (\n  <div className=\"App\">\n    <header className=\"App-header\">\n    &#9998; PicChat\n    <SignOut />\n    </header>\n   \n      <section>\n      {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    \n  </div>\n);\n}\n/* Sign in */\nfunction SignIn() {\nconst signInWithGoogle = () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  auth.signInWithPopup(provider);\n}\nreturn (\n  <>\n  <button className=\"sign-in-button\" onClick={signInWithGoogle}>Sign in with Google</button>\n  <p className=\"loginPar\">Do not violate the community guidelines or you will be banned</p>\n  </>\n)\n}\n/* Sign out */\nfunction SignOut() {\nreturn auth.currentUser && (\n  <button onClick={() => auth.signOut()}>Sign out</button>\n)\n}\n\nfunction ChatRoom() {\n/* Stores messages on database and assigns messages an ID */\nconst empty = useRef()\nconst messagesRef = firestore.collection('messages');\nconst imagesRef = firestore.collection('images')\nconst query = messagesRef.orderBy('createdAt').limit(25);\nconst imageQuery = imagesRef.orderBy('createdAt').limit(25);\n\nconst [messages] = useCollectionData(query, {idField: 'id'});\nconst [imageMessages] = useCollectionData(imageQuery, {idField: 'id'});\n\nconst [formValue, setFormValue] = useState('');\n/* Info displayed on database.  */\nconst sendMessage = async(e) => {\n\n  e.preventDefault();\n\n  const {uid, photoURL} = auth.currentUser;\n\n  await messagesRef.add({\n    text: formValue,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    uid,\n    photoURL,\n    imageURL\n  })\n  setFormValue('');\n\n  empty.current.scrollIntoView({ behavior: 'smooth'});\n}\n\n\nconst [imageURL, setImageURL] = useState(null); \n\nconst sigCanvas = useRef({});\n\nconst clear = () => sigCanvas.current.clear();\n/* Sends canvas drawing as message */\nconst save = () =>\nsetImageURL(sigCanvas.current.getCanvas().toDataURL(\"image/svg/xml\", 1.0));\n\nreturn (<>\n  <main>\n\n    {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n{/* Styling for the drawn message */}\n{imageURL ? (\n  <img\n    src={imageURL}\n    alt=\"drawing\"\n    style={{\n      position: 'inherit',\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: 'row-reverse',\n      alignSelf: 'flex-end',\n      width: 'auto',\n      height: '60vh'\n    }}\n    />\n  ) : null }\n    <span ref={empty}></span>\n\n\n  </main>\n\n  <form onSubmit={sendMessage}>\n\n    <Popup modal trigger ={<button type=\"reset\">&#9998;</button>}\n      closeDocumentOnClick = {false}\n      >\n        {close => (\n          <>\n      <SignaturePad\n      ref={sigCanvas}\n      canvasProps = {{className: \"signatureCanvas\"}}\n      />\n      <button className=\"canvButton\" onClick={close}>Close</button>\n      <button className=\"canvButton\" onClick={clear}>Clear</button>\n      <button type=\"submit\" className=\"canvButton\" onClick={save}>Send</button>\n         </>\n        )}\n    </Popup><input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Type your message\" />\n\n    <button type=\"submit\" disabled={!formValue}>&#9654;</button>\n\n  </form>\n</>)\n\n}\nfunction ChatMessage(props){\n    const {text, uid, photoURL} = props.message;\n\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (<>\n      <div className={`message ${messageClass}`}>\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} alt='profile' />\n        <p>{text}</p>\n      </div>\n    </>)\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}